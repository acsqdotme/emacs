* Config written in org mode

** basic configs

*** unguiing

#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-message t)
#+end_src

*** subword mode

camelCaseAcknowledgment

#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

*** no autosaves or backups

#+begin_src emacs-lisp
    (setq make-backup-file nil)
    (setq auto-save-default nil)
#+end_src

*** electric

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src

*** no bell

#+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
#+end_src

*** show line and pretty symbols in gui mode

#+begin_src emacs-lisp
    (when window-system (global-hl-line-mode t))
    (when window-system (global-prettify-symbols-mode t))
#+end_src


*** relative line nums

#+begin_src emacs-lisp
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode)
#+end_src

*** which-key

#+begin_src emacs-lisp
    (use-package which-key
	:ensure t
	:init
	(which-key-mode))
#+end_src

*** evil mode

#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t)
  (use-package evil
    :ensure t
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-want-keybinding nil)
    ;; no vim insert bindings
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1))
#+end_src

**** evil collections

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

*** ido

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

add vertical

#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

*** smex

#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

*** buffer switching

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

**** always kill current buffer

#+begin_src emacs-lisp
  (defun kill-curr-buff ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buff)
#+end_src

*** avy

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

*** y/n instead of yes/no

#+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** conf edit/reload

**** edit

#+begin_src emacs-lisp
  (defun conf-edit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'conf-edit)
#+end_src

**** reload

#+begin_src emacs-lisp
  (defun conf-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
  (global-set-key (kbd "C-c r") 'conf-reload)
#+end_src

*** rainbow

for coloring hex codes #005F87

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))
#+end_src

** terminal

*** default zsh

#+begin_src emacs-lisp
    (defvar my-terminal-shell "/usr/bin/zsh")
    (defadvice ansi-term (before force-bash)
	(interactive (list my-terminal-shell)))
    (ad-activate 'ansi-term)
#+end_src
